// Code generated by MockGen. DO NOT EDIT.
// Source: repository/record_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	entity "challenge.haraj.com.sa/kraicklist/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockRecordRepository is a mock of RecordRepository interface.
type MockRecordRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRecordRepositoryMockRecorder
}

// MockRecordRepositoryMockRecorder is the mock recorder for MockRecordRepository.
type MockRecordRepositoryMockRecorder struct {
	mock *MockRecordRepository
}

// NewMockRecordRepository creates a new mock instance.
func NewMockRecordRepository(ctrl *gomock.Controller) *MockRecordRepository {
	mock := &MockRecordRepository{ctrl: ctrl}
	mock.recorder = &MockRecordRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecordRepository) EXPECT() *MockRecordRepositoryMockRecorder {
	return m.recorder
}

// Load mocks base method.
func (m *MockRecordRepository) Load(filepath string) (*entity.Searcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", filepath)
	ret0, _ := ret[0].(*entity.Searcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockRecordRepositoryMockRecorder) Load(filepath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockRecordRepository)(nil).Load), filepath)
}
